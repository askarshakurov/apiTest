Тут будут отображены тест кейсы котороыми надо проверить/покрыть автотестами

POST
1.Нужна будет маска,по которой как по шаблону можно будет проверять поле username/email/password - длина,позволенные символы,язык итд = High
2.Посмотреть на поведение контейнеров (fuzz testing) на то как быстро они восстановятся, перераспределят ли данные/очереди на новый под и отработку запросов в целом = Medium
3.Если есть доступ к БД - попробовать изменить записанные данные и посмотреть как отработает БД по выдаче данных = Low
4.Попросить метод/доступ к БД чтобы удалить все данные в БД и сделать GET/POST запросы = Low
5.Посомтреть взаимодействие с другими сервисами тоже по регрессу = High
6.Если правильно понял, то в password используется BCrypto шифрование - попросить тестовые ключи или метод для шифрования/дешифрования пароля для более точной проверки кейсов - Medium
7.Проверить создание юзера  на различные домены почты - High
8.Уточнить максимальное занчение id , точнее тип данных и тип поведения после например удаления юзера из БД- Low
9.Поговорить про ошибку в тексте  "message": "User Successully created" - Low
10.Сделать ошибки по запросам более информативным = Low
11.Отправить данные без обязательных полей = Low
12.Условно нагрузочное и отработка большой очереди запросов на создание юзеров = Medium
13.Запросы c SQL иньекциями - Medium
14.Отправка пустых значении в key = High
15.Проверка запросов с кодами ошибок (200/400/500) = High
16.Отправка идентичных по данным запросов 2 раза подряд - посмотреть поведение системы = High
17.Проверка логирования запросов в поде/kibane
18.Подключение мок сервера если сервис не готов/часто отваливается/другая причина = Low
19.Проверка по пустым значениям username/password/email = High

GET
1.Проверка отображения данных после отправки успешного/неуспешного  POST запроса = High
2.Проверка запросов с кодами ошибок (200/400/500) = High
3.Проверка отработки запроса если под не доступен = Medium
4.Интеграционная проверка если есть взаимодействие с другими сервисами = High
5.Проверка длины отображения данных, может быть отображение по пагинации и конкретного/не_существующего юзера по определеным ключам/queries = Medium
6.Проверка времени отработки запроса (с мин/макс количеством данных) = Low
7.Условно нагрузочное и отработка большой очереди запросов на получение данных юзеров = Medium
8.Проверка логирования запросов в поде/kibane
9.Подключение мок сервера если сервис не готов/часто отваливается/другая причина = Low

Причечание:
1.В будущем проставить теги для тестов для регресса/смоука и указать их в сюитах для более точечных прогонов тестов
2.При необходимости проставить логирование например при отправке/получении данных или создания тестовых данных или например очищении записей в БД
3.При необходимости прописать конфиги для docker контейнера с зависимостями + jenkinsfile
4.Если нет документации то обсудить с разработкой о работе сервисе и узнать основной флоу/краевые моменты по реализации
